{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/scripts/main.js"],"names":[],"mappings":"AAAA;ACAA","file":"all.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// External Libraries\nvar PIXI = require('pixi.js');\nvar map = require('./maps/001_tutorial.js');\nvar globals = require('./globals');\n\n// Global Variables\nvar renderer = new PIXI.WebGLRenderer(800, 600);\nvar viewport = new PIXI.Container();\nvar stage = new PIXI.Container();\n\n// Setup Work\n// var width = getNodeWidth(map.root);\n// var height = getNodeHeight(map.root);\n\n// viewport.addChild(stage);\n// document.body.appendChild(renderer.view);\n// animate(); // kick off the animation loop (defined below)\n// console.log();\n// console.log(map);\n\nfunction getNodeWidth(node) {\n\tif(node._width) return node._width;\n\tvar width = 0;\n\tif(!node.children.length) {\n\t\twidth = 1;\n\t}\n\telse {\n\t\tfor(var i=0; i<node.children.length; i++) {\n\t\t\twidth += getNodeWidth(node.children[i]);\n\t\t}\n\t}\n\tnode._width = width;\n\treturn width;\n}\n\nfunction getNodeHeight(node) {\n\tif(node._height) return node._height;\n\tvar heigth = 0;\n\tif(!node.children.length) {\n\t\theight = 1;\n\t}\n\telse {\n\t\tvar maxHeight = 0;\n\t\tfor(var i=0; i<node.children.length; i++) {\n\t\t\tvar tmp = getNodeHeight(node.children[i]);\n\t\t\tif(tmp > maxHeight) maxHeight = tmp;\n\t\t}\n\t\theight = 1+maxHeight;\n\t}\n\tnode._height = height;\n\treturn height;\n}\n\nfunction drawNode(node, defaultDisplay, x, y) {\n\tvar width = getNodeWidth(node);\n\tvar height = getNodeHeight(node);\n\n\tx = x | 0;\n\ty = y | 0;\n\n\tvar draw = node.display ? node.display() | defaultDisplay();\n\tdraw.position\n}\n\nfunction animate() {\n\t// start the timer for the next animation loop\n\trequestAnimationFrame(animate);\n\n\t// this is the main render call that makes pixi draw your container and its children.\n\trenderer.render(viewport);\n}\n\n// \n// // You can use either `new PIXI.WebGLRenderer`, `new PIXI.CanvasRenderer`, or `PIXI.autoDetectRenderer`\n// // which will try to choose the best renderer for the environment you are in.\n// var renderer = new PIXI.WebGLRenderer(800, 600);\n\n// // The renderer will create a canvas element for you that you can then insert into the DOM.\n// document.body.appendChild(renderer.view);\n\n// // You need to create a root container that will hold the scene you want to draw.\n// var viewport = new PIXI.Container();\n// var stage = new PIXI.Container();\n// var nodes = [];\n// var m = 1;\n// var k = 1;\n\n// viewport.addChild(stage);\n\n// constructStage(map, null);\n\n// console.log(nodes);\n\n// // kick off the animation loop (defined below)\n// animate();\n\n// function animate() {\n// \tfor(var i=0; i<nodes.length; i++) {\n// \t\tvar node = nodes[i];\n// \t\tnode.acceleration.x = 0;\n// \t\tnode.acceleration.y = 0;\n// \t}\n\n// \tfor(var i=0; i<nodes.length-1; i++) {\n// \t\tfor(var j=i+1; j<nodes.length; j++) {\n// \t\t\tvar node1 = nodes[i];\n// \t\t\tvar node2 = nodes[j];\n// \t\t\tvar delA = {x: 0, y: 0};\n// \t\t\tvar delS = {\n// \t\t\t\tx: node2.position.x - node1.position.x,\n// \t\t\t\ty: node2.position.y - node1.position.y\n// \t\t\t};\n\n// \t\t\tdelA.x = 100/delS.x;\n// \t\t\tdelA.y = 100/delS.y;\n\n// \t\t\t// if(node1.parentDisplayNode === node2 || node2.parentDisplayNode === node1) {\n// \t\t\t// \tdelA.x -= (delS.x)/100;\n// \t\t\t// \tdelA.y -= (delS.y)/100;\n// \t\t\t// }\n\n// \t\t\tif(node1.parentDisplayNode) {\n// \t\t\t\tnode1.acceleration.x += delA.x;\n// \t\t\t\tnode1.acceleration.y += delA.y;\n// \t\t\t}\n\n// \t\t\tif(node2.parentDisplayNode) {\n// \t\t\t\tnode2.acceleration.x += delA.x;\n// \t\t\t\tnode2.acceleration.y += delA.y;\n// \t\t\t}\n// \t\t}\n// \t}\n\n// \tfor(var i=0; i<nodes.length; i++) {\n// \t\tvar node = nodes[i];\n// \t\tnode.velocity.x += node.acceleration.x;\n// \t\tnode.velocity.y += node.acceleration.y;\n\n// \t\tnode.position.x += node.acceleration.x;\n// \t\tnode.position.y += node.acceleration.y;\n// \t}\n\n// \t// start the timer for the next animation loop\n// \trequestAnimationFrame(animate);\n\n// \t// this is the main render call that makes pixi draw your container and its children.\n// \trenderer.render(viewport);\n// }\n\n// function constructStage(node, parent) {\n// \tvar displayNode = node.display();\n// \tdisplayNode.parentDisplayNode = parent;\n// \tdisplayNode.velocity = {x: 0, y: 0};\n// \tdisplayNode.acceleration = {x: 0, y: 0};\n// \tdisplayNode.position.x = 100+Math.random()*500;\n// \tdisplayNode.position.y = 100+Math.random()*500;\n// \tconsole.log(displayNode.position);\n// \tstage.addChild(displayNode);\n// \tnodes.push(displayNode);\n\n// \tfor(var i=0; i<node.children.length; i++) {\n// \t\tconstructStage(\n// \t\t\tnode.children[i],\n// \t\t\tdisplayNode\n// \t\t);\n// \t}\n\n// \t// console.log(xOffset);\n// \t// var nodeContainer = new PIXI.Container();\n// \t// var nodeDisplay = node.display();\n// \t// console.log(nodeDisplay);\n// \t// xOffset = xOffset || 0;\n// \t// nodeContainer.addChild(nodeDisplay);\n// \t// if(parent) {\n// \t// \tnodeDisplay.position.y = parent.getBounds().height+globals.node.spacing.y;\n// \t// \tnodeDisplay.position.x = xOffset;\n// \t// }\n\n// \t// var childrenWidth =\n// \t// \tnode.children.length*globals.node.size.width +\n// \t// \t(node.children.length-1)*globals.node.spacing.x;\n\n// \t// for(var i=0; i<node.children.length; i++) {\n// \t// \tconstructStage(\n// \t// \t\tnodeContainer,\n// \t// \t\tnode.children[i],\n// \t// \t\tnodeDisplay,\n// \t// \t\ti*(globals.node.size.width+globals.node.spacing.x) - childrenWidth/2\n// \t// \t);\n// \t// }\n\n// \t// container.addChild(nodeContainer);\n// }"]}